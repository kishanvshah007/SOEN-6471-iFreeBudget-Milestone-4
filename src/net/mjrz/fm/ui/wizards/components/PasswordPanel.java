/*******************************************************************************
 * Copyright  
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package net.mjrz.fm.ui.wizards.components;

import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.HashMap;

import javax.swing.Box;
import javax.swing.JPanel;

import net.mjrz.fm.utils.PwdUtils;

/**
 * @author iFreeBudget ifreebudget@gmail.com
 * 
 */
public class PasswordPanel extends JPanel implements WizardComponent {

	private static final long serialVersionUID = 1L;
	private String msg = null;
	// Variables declaration - do not modify
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JPasswordField password;
	private javax.swing.JPasswordField verifyPassword;

	// End of variables declaration

	/** Creates new form LocationPanel */
	public PasswordPanel() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		password = new javax.swing.JPasswordField();
		verifyPassword = new javax.swing.JPasswordField();

		setBackground(java.awt.Color.white);

		jLabel1.setText("Choose a password:");
		Font f = jLabel1.getFont().deriveFont(Font.BOLD);
		jLabel1.setFont(f);

		jLabel2.setText("<html><p>Passwords must be between 6 and 20 characters"
				+ "<br>Cannot contain special characters." + "</p></html>");

		jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);

		jLabel4.setText("Verify password");
		f = jLabel4.getFont().deriveFont(Font.BOLD);
		jLabel4.setFont(f);

		setLayout(new GridBagLayout());

		add(Box.createVerticalGlue());

		add(jLabel1);
		add(Box.createVerticalStrut(5));
		add(password);

		add(jLabel4);
		add(Box.createVerticalStrut(5));
		add(verifyPassword);

		add(jLabel2);
		add(Box.createVerticalStrut(5));
		add(jLabel3);

		add(Box.createVerticalGlue());

		GridBagConstraints g1 = new GridBagConstraints();
		g1.gridx = 0;
		g1.gridy = 0;
		g1.weightx = 1;
		g1.fill = GridBagConstraints.BOTH;
		g1.insets = new Insets(10, 10, 10, 10);
		add(jLabel1, g1);

		g1 = new GridBagConstraints();
		g1.gridx = 0;
		g1.gridy = 1;
		g1.fill = GridBagConstraints.HORIZONTAL;
		g1.insets = new Insets(10, 10, 10, 10);
		add(password, g1);

		g1 = new GridBagConstraints();
		g1.gridx = 0;
		g1.gridy = 2;
		g1.fill = GridBagConstraints.BOTH;
		g1.insets = new Insets(10, 10, 10, 10);
		add(jLabel4, g1);

		g1 = new GridBagConstraints();
		g1.gridx = 0;
		g1.gridy = 3;
		g1.fill = GridBagConstraints.HORIZONTAL;
		g1.insets = new Insets(10, 10, 10, 10);
		add(verifyPassword, g1);

		g1 = new GridBagConstraints();
		g1.gridx = 0;
		g1.gridy = 4;
		g1.fill = GridBagConstraints.BOTH;
		g1.insets = new Insets(10, 10, 10, 10);
		add(jLabel2, g1);

		g1 = new GridBagConstraints();
		g1.gridx = 0;
		g1.gridy = 5;
		g1.fill = GridBagConstraints.BOTH;
		g1.insets = new Insets(10, 10, 10, 10);
		add(jLabel3, g1);
	}// </editor-fold>

	// private boolean validate(char[] pass, char[] verify) {
	// boolean valid = true;
	// if (pass.length != verify.length) {
	// msg = tr("Passwords do not match");
	// valid = false;
	// return valid;
	// }
	// if (pass.length < 6 || pass.length > 20) {
	// msg =
	// tr("Passwords must be between 6 and 20 characters\nCannot contain special characters.");
	// valid = false;
	// return valid;
	// }
	// if (valid) {
	// for (int i = 0; i < pass.length; i++) {
	// if (!Character.isLetterOrDigit(pass[i])) {
	// msg =
	// tr("Passwords must be between 6 and 20 characters\nCannot contain special characters.");
	// valid = false;
	// break;
	// }
	// }
	// }
	//
	// for (int i = 0; i < pass.length; i++) {
	// if (pass[i] != verify[i]) {
	// msg = tr("Passwords do not match");
	// valid = false;
	// break;
	// }
	// }
	//
	// return valid;
	// }

	public String[][] getValues() {
		String[][] ret = new String[1][1];

		String[] row = new String[2];
		row[0] = "PASSWORD";
		row[1] = new String(password.getPassword());

		ret[0] = row;

		return ret;
	}

	public boolean isComponentValid() {
		msg = PwdUtils.validatePwdPolicy(password.getPassword(),
				verifyPassword.getPassword());
		return msg == null;
	}

	public String getMessage() {
		return msg;
	}

	public void setComponentFocus() {
		password.requestFocusInWindow();
	}

	public void updateComponentUI(HashMap<String, String[][]> values) {
	}
}
