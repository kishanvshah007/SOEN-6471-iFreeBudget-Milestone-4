/*******************************************************************************
 * Copyright  
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package net.mjrz.fm.ui.wizards.components.profileimport;

import java.awt.Color;
import java.io.File;
import java.util.HashMap;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

import net.mjrz.fm.ui.wizards.components.WizardComponent;

public class BackupSelectPanel extends javax.swing.JPanel implements
		WizardComponent {

	private static final long serialVersionUID = 1L;

	/** Creates new form BackupSelectPanel */
	public BackupSelectPanel() {
		initComponents();
		this.setBackground(Color.WHITE);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		selectB = new javax.swing.JButton();
		backupFileLbl = new javax.swing.JLabel();

		jLabel1.setText("Select backup file:");

		selectB.setText("Choose");
		selectB.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				selectBActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		jLabel1,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		178,
																		Short.MAX_VALUE)
																.addGap(168,
																		168,
																		168))
												.addGroup(
														javax.swing.GroupLayout.Alignment.TRAILING,
														layout.createSequentialGroup()
																.addComponent(
																		backupFileLbl,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		334,
																		Short.MAX_VALUE)
																.addContainerGap())
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		selectB,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		106,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addContainerGap(
																		240,
																		Short.MAX_VALUE)))));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGap(90, 90, 90)
								.addComponent(jLabel1)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(selectB)
								.addGap(18, 18, 18)
								.addComponent(backupFileLbl,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										32,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap(112, Short.MAX_VALUE)));
	}// </editor-fold>

	private void selectBActionPerformed(java.awt.event.ActionEvent evt) {
		JFileChooser fc = new JFileChooser("Select backup file");
		fc.addChoosableFileFilter(new ZipFileFilter());
		fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		int val = fc.showOpenDialog(this);
		if (val == JFileChooser.APPROVE_OPTION) {
			File f = fc.getSelectedFile();
			backupFileLbl.setText(f.getAbsolutePath());
		}
	}

	// Variables declaration - do not modify
	private javax.swing.JLabel backupFileLbl;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JButton selectB;
	private String message = null;

	// End of variables declaration

	@Override
	public String getMessage() {
		return message;
	}

	@Override
	public String[][] getValues() {
		String[][] ret = new String[1][1];

		String[] row = new String[2];
		row[0] = "SOURCE";
		row[1] = backupFileLbl.getText();

		ret[0] = row;

		return ret;
	}

	@Override
	public boolean isComponentValid() {
		String bkupFile = backupFileLbl.getText();
		if (bkupFile == null || bkupFile.trim().length() == 0) {
			message = "Please select a backup file";
			return false;
		}
		return true;
	}

	@Override
	public void setComponentFocus() {
	}

	@Override
	public void updateComponentUI(HashMap<String, String[][]> values) {
	}

	static class ZipFileFilter extends FileFilter {
		public boolean accept(File f) {
			if (f.isDirectory()) {
				return true;
			}

			int pos = f.getName().lastIndexOf('.');
			String ext = null;
			if (pos >= 0 && pos + 1 < f.getName().length())
				ext = f.getName().substring(pos + 1);

			if (ext != null) {
				if (ext.equalsIgnoreCase("zip")) { //$NON-NLS-2$
					return true;
				}
				else {
					return false;
				}
			}

			return false;
		}

		// The description of this filter
		public String getDescription() {
			return "Zip files";
		}
	}
}
