/*******************************************************************************
 * Copyright  
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package net.mjrz.fm.ui.wizards.components.transaction;

import static net.mjrz.fm.utils.Messages.tr;

import java.awt.Color;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;

import javax.swing.BorderFactory;
import javax.swing.text.MaskFormatter;

import net.mjrz.fm.services.SessionManager;
import net.mjrz.fm.ui.utils.DateChooser;
import net.mjrz.fm.ui.utils.GuiUtilities;
import net.mjrz.fm.ui.wizards.components.WizardComponent;

/**
 * @author iFreeBudget ifreebudget@gmail.com
 * 
 */
public class TxDetailsPanel extends javax.swing.JPanel implements
		WizardComponent {
	private static final long serialVersionUID = 1L;
	// Variables declaration - do not modify
	private javax.swing.JToggleButton calButton;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JScrollPane jScrollPane1;

	private net.mjrz.fm.ui.utils.REditor jTextArea1;

	private javax.swing.JTextField txAmtTf;
	private DateChooser txDateTf;
	private MaskFormatter dateMaskFormatter;
	private SimpleDateFormat sdf = null;
	private String msg;

	/** Creates new form TxDetailsPanel */
	public TxDetailsPanel() {
		sdf = SessionManager.getDateFormat();
		initDateMaskFormatter();
		initComponents();
		setBackground(Color.WHITE);
	}

	private void initDateMaskFormatter() {
		try {
			dateMaskFormatter = new MaskFormatter("####-##-##");
			dateMaskFormatter.setPlaceholderCharacter('#');
		}
		catch (Exception e) {
			// Ignore exception
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();

		jLabel2 = new javax.swing.JLabel();

		txAmtTf = new javax.swing.JTextField();
		GuiUtilities.removeCustomMouseListener(txAmtTf);

		jLabel3 = new javax.swing.JLabel();

		// txDateTf = new JFormattedTextField(dateMaskFormatter);
		txDateTf = new DateChooser(false, sdf);
		txDateTf.setDate(new Date());

		jScrollPane1 = new javax.swing.JScrollPane();

		jTextArea1 = new net.mjrz.fm.ui.utils.REditor();

		calButton = new javax.swing.JToggleButton(
				new net.mjrz.fm.ui.utils.MyImageIcon("icons/calendar.png"));
		calButton.setVisible(false);

		setBorder(javax.swing.BorderFactory
				.createTitledBorder(tr("Transaction details")));

		jLabel1.setText("");

		jLabel2.setText(tr("Amount"));

		jLabel3.setText(tr("Date"));

		jScrollPane1.setViewportView(jTextArea1);
		jScrollPane1.setBorder(BorderFactory.createTitledBorder(tr("Notes")));
		jScrollPane1.setBackground(Color.WHITE);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														jScrollPane1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														577, Short.MAX_VALUE)
												.addGroup(
														layout.createSequentialGroup()
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.TRAILING)
																				.addGroup(
																						layout.createSequentialGroup()
																								.addComponent(
																										jLabel3)
																								.addGap(57,
																										57,
																										57))
																				.addGroup(
																						layout.createSequentialGroup()
																								.addComponent(
																										jLabel2,
																										javax.swing.GroupLayout.PREFERRED_SIZE,
																										76,
																										javax.swing.GroupLayout.PREFERRED_SIZE)
																								.addPreferredGap(
																										javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING,
																				false)
																				.addGroup(
																						layout.createSequentialGroup()
																								.addComponent(
																										txDateTf,
																										javax.swing.GroupLayout.PREFERRED_SIZE,
																										94,
																										javax.swing.GroupLayout.PREFERRED_SIZE)
																								.addPreferredGap(
																										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																								.addComponent(
																										calButton,
																										javax.swing.GroupLayout.PREFERRED_SIZE,
																										24,
																										javax.swing.GroupLayout.PREFERRED_SIZE))
																				.addComponent(
																						txAmtTf))
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																		350,
																		Short.MAX_VALUE))
												.addComponent(
														jLabel1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														577, Short.MAX_VALUE))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(jLabel1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										33,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel2)
												.addComponent(
														txAmtTf,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jLabel3)
												.addGroup(
														layout.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
																.addComponent(
																		txDateTf,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addComponent(
																		calButton,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		23,
																		javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										156, Short.MAX_VALUE).addContainerGap()));
	}// </editor-fold>

	public String getMessage() {
		return msg;
	}

	public String[][] getValues() {
		String[] amtRow = { "TXAMT", txAmtTf.getText() };
		String[] dtRow = { "TXDT", txDateTf.getText() };
		String[] notesRow = { "TXNOTES", jTextArea1.getPlainText() };
		String[] notesRowMarkup = { "TXNOTESMARKUP", jTextArea1.getText() };

		String[][] ret = new String[4][2];
		ret[0] = amtRow;
		ret[1] = dtRow;
		ret[2] = notesRow;
		ret[3] = notesRowMarkup;

		return ret;
	}

	public boolean isComponentValid() {
		msg = "";
		String amt = txAmtTf.getText();
		try {
			Double.parseDouble(amt);
			sdf.parse(txDateTf.getText());
		}
		catch (NumberFormatException e) {
			msg = tr("Invalid amount for transaction");
			return false;
		}
		catch (ParseException e) {
			msg = tr("Invalid date for transaction");
			return false;
		}
		return true;
	}

	public void setComponentFocus() {
		txAmtTf.setText("");
		txDateTf.setDate(new Date());
		jTextArea1.setText("");
		txAmtTf.requestFocusInWindow();
	}

	public void updateComponentUI(HashMap<String, String[][]> values) {
	}
}
