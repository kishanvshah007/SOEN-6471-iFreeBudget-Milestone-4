/*******************************************************************************
 * Copyright  
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package net.mjrz.fm.ui.dialogs;

import static net.mjrz.fm.utils.Messages.tr;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

import net.mjrz.fm.constants.AccountTypes;
import net.mjrz.fm.entity.FManEntityManager;
import net.mjrz.fm.entity.beans.Account;
import net.mjrz.fm.entity.beans.Budget;
import net.mjrz.fm.entity.beans.BudgetedAccount;
import net.mjrz.fm.services.SessionManager;
import net.mjrz.fm.ui.utils.TableHeaderRenderer;
import net.mjrz.fm.ui.utils.UIDefaults;
import net.mjrz.fm.utils.MiscUtils;

import org.apache.log4j.Logger;

@SuppressWarnings("serial")
public class BudgetEditorDialog extends javax.swing.JPanel {
	// Variables declaration - do not modify
	private javax.swing.JTable acctsTbl;
	private javax.swing.JButton addAcctB;
	private javax.swing.JButton cancelB;
	private javax.swing.JButton delAcctB;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JLabel nameLbl;
	private javax.swing.JTextField nameTf;
	private javax.swing.JButton saveB;
	// End of variables declaration

	private MyTableModel tableModel;
	private Budget budget;
	private FManEntityManager em;
	private BudgetViewerDialog parent;
	private static Logger logger = Logger.getLogger(BudgetEditorDialog.class
			.getName());
	private JDialog container;

	public static JDialog getInstance(BudgetViewerDialog parent, Budget budget) {
		JDialog d = new JDialog(parent, "Edit budget", true);

		d.setLayout(new BorderLayout());
		d.add(new BudgetEditorDialog(d, parent, budget), BorderLayout.CENTER);
		return d;
	}

	/** Creates new form BudgetEditorDialog */
	private BudgetEditorDialog(JDialog container, BudgetViewerDialog parent,
			Budget budget) {

		this.container = container;
		this.budget = budget;
		this.parent = parent;

		em = new FManEntityManager();
		initComponents();
		populateFields();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		nameLbl = new javax.swing.JLabel();
		nameTf = new javax.swing.JTextField();
		jScrollPane1 = new javax.swing.JScrollPane();
		tableModel = new MyTableModel();
		acctsTbl = new javax.swing.JTable();
		cancelB = new javax.swing.JButton();
		saveB = new javax.swing.JButton();
		addAcctB = new javax.swing.JButton();
		delAcctB = new javax.swing.JButton();

		nameLbl.setText("Name");

		acctsTbl.setModel(tableModel);
		acctsTbl.setSelectionForeground(Color.BLACK);
		acctsTbl.setGridColor(new Color(154, 191, 192));
		acctsTbl.getTableHeader().setDefaultRenderer(
				new TableHeaderRenderer(UIDefaults.DEFAULT_TABLE_HEADER_COLOR,
						Color.WHITE));
		acctsTbl.setRowHeight(20);
		acctsTbl.setBackground(Color.WHITE);

		jScrollPane1.setViewportView(acctsTbl);

		cancelB.setText("Cancel");
		cancelB.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelBActionPerformed(evt);
			}
		});
		container.getRootPane().setDefaultButton(cancelB);

		saveB.setText("Save");
		saveB.setToolTipText(tr("Save"));
		saveB.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveBActionPerformed(evt);
			}
		});

		addAcctB.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/icons/buy.png")));
		addAcctB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				addAcctBActionPerformed(e);
			}
		});
		addAcctB.setToolTipText(tr("Add accounts"));
		delAcctB.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/icons/sell.png")));
		delAcctB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				delAcctBActionPerformed(e);
			}
		});
		delAcctB.setToolTipText(tr("Remove accounts"));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		nameLbl)
																.addGap(18, 18,
																		18)
																.addComponent(
																		nameTf,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		155,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
												.addComponent(
														jScrollPane1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														375, Short.MAX_VALUE)
												.addGroup(
														javax.swing.GroupLayout.Alignment.TRAILING,
														layout.createSequentialGroup()
																.addComponent(
																		saveB,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		84,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		cancelB,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		81,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		addAcctB)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		delAcctB)))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGap(20, 20, 20)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(nameLbl)
												.addComponent(
														nameTf,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										275, Short.MAX_VALUE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(addAcctB)
												.addComponent(delAcctB))
								.addGap(19, 19, 19)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(cancelB)
												.addComponent(saveB))
								.addContainerGap()));
	}// </editor-fold>

	private void saveBActionPerformed(java.awt.event.ActionEvent evt) {
		try {
			String name = nameTf.getText();
			if (name != null) {
				name = name.trim();
				if (!name.equals(budget.getName())) {
					budget.setName(name);
				}
			}
			int sz = tableModel.getRowCount();
			Set<BudgetedAccount> set = budget.getAccounts();
			for (int i = 0; i < sz; i++) {
				String aName = (String) tableModel.getValueAt(i, 0);
				BigDecimal val = (BigDecimal) tableModel.getValueAt(i, 1);
				for (BudgetedAccount ba : set) {
					if (ba.getAccountName() == null) {
						logger.error("Account with null "
								+ "name found in budgeted account list");
						continue;
					}
					if (ba.getAccountName().equals(aName)) {
						if (val != null) {
							ba.setAllocatedAmount(val);
						}
						else {
							ba.setAllocatedAmount(new BigDecimal(0));
						}
					}
				}
			}
			em.updateBudget(budget);
		}
		catch (Exception e) {
			logger.error(MiscUtils.stackTrace2String(e));
			JOptionPane.showMessageDialog(this,
					"Failed to update budget - Reason " + e.getMessage(),
					tr("Error"), JOptionPane.ERROR_MESSAGE);
		}
		finally {
			parent.updateDisplay();
			SwingUtilities.getWindowAncestor(this).dispose();
		}
	}

	private void cancelBActionPerformed(java.awt.event.ActionEvent evt) {
		SwingUtilities.getWindowAncestor(this).dispose();
	}

	private void addAcctBActionPerformed(ActionEvent e) {
		JDialog parent = (JDialog) SwingUtilities.getWindowAncestor(this);
		JDialog d = new AccountSelector(parent);
		d.setPreferredSize(new Dimension(300, 200));
		d.pack();
		d.setLocationRelativeTo(this);
		d.setVisible(true);
		d.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
	}

	private void delAcctBActionPerformed(ActionEvent e) {
		int[] rows = acctsTbl.getSelectedRows();
		Set<BudgetedAccount> accts = budget.getAccounts();
		for (int i = 0; i < rows.length; i++) {
			int sel = acctsTbl.convertRowIndexToModel(rows[i]);
			String val = (String) tableModel.getValueAt(sel, 0);
			Iterator<BudgetedAccount> iter = accts.iterator();
			while (iter.hasNext()) {
				BudgetedAccount tmp = iter.next();
				if (tmp.getAccountName().equals(val)) {
					iter.remove();
				}
			}
		}
		try {
			em.updateBudget(budget);
		}
		catch (Exception ex) {
			logger.error(MiscUtils.stackTrace2String(ex));
		}
		finally {
			parent.updateDisplay();
			SwingUtilities.getWindowAncestor(this).dispose();
		}
	}

	private void populateFields() {
		clear();
		try {
			nameTf.setText(budget.getName());

			Set<BudgetedAccount> accts = budget.getAccounts();
			for (BudgetedAccount a : accts) {
				String name = FManEntityManager
						.getAccountName(a.getAccountId());
				Object[] row = { name, a.getAllocatedAmount() };
				a.setAccountName(name);
				tableModel.addRow(row);
			}
		}
		catch (Exception e) {
			logger.error(MiscUtils.stackTrace2String(e));
		}
	}

	private void clear() {
		nameTf.setText("");
		tableModel.setRowCount(0);
	}

	private boolean accountExistsInBudget(BudgetedAccount a) {
		return budget.getAccounts().contains(a);
	}

	private void addToBudget(Object[] accounts) {
		try {
			for (Object a : accounts) {
				BudgetedAccount ba = (BudgetedAccount) a;
				budget.getAccounts().add(ba);
			}
			populateFields();
		}
		catch (Exception e) {
			logger.error(MiscUtils.stackTrace2String(e));
		}
	}

	static class MyTableModel extends DefaultTableModel {
		boolean[] canEdit = new boolean[] { false, true };

		public boolean isCellEditable(int rowIndex, int columnIndex) {
			return canEdit[columnIndex];
		}

		public MyTableModel() {
			super(new Object[][] {}, new String[] { "Account",
					"Amount allocated" });
		}

		public void addRow(Object[] rowData) {
			super.addRow(rowData);
		}

		public Class<?> getColumnClass(int columnIndex) {
			if (columnIndex == 1) {
				return BigDecimal.class;
			}
			return String.class;
		}
	}

	class AccountSelector extends JDialog {
		private JList acctList;
		private DefaultListModel model;
		private JButton ok;

		public AccountSelector(JDialog parent) {
			super(parent, "Select accounts", true);
			model = new DefaultListModel();
			try {
				List accts = em.getAccountsForUser(
						SessionManager.getSessionUserId(),
						AccountTypes.ACCT_TYPE_EXPENSE);
				if (accts != null) {
					for (Object obj : accts) {
						Account a = (Account) obj;
						BudgetedAccount ba = new BudgetedAccount();
						ba.setAccountId(a.getAccountId());

						if (accountExistsInBudget(ba)) {
							continue;
						}
						String aName = FManEntityManager.getAccountName(ba
								.getAccountId());
						ba.setAccountName(aName);
						model.addElement(ba);
					}
				}
			}
			catch (Exception e) {
				logger.error(MiscUtils.stackTrace2String(e));
			}

			initialize();
		}

		private void initialize() {
			getContentPane().setLayout(new GridBagLayout());

			acctList = new JList(model);

			JScrollPane sp = new JScrollPane(acctList);

			ok = new JButton("Add");
			ok.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					okButtonActionPerformed(e);
				}
			});
			GridBagConstraints gbc1 = new GridBagConstraints();
			gbc1.gridx = 0;
			gbc1.gridy = 0;
			gbc1.ipadx = 5;
			gbc1.insets = new Insets(10, 2, 2, 2);
			gbc1.weightx = 1;
			gbc1.weighty = 1;
			gbc1.fill = GridBagConstraints.BOTH;
			gbc1.anchor = GridBagConstraints.FIRST_LINE_START;

			getContentPane().add(sp, gbc1);

			GridBagConstraints gbc2 = new GridBagConstraints();
			gbc2.gridx = 0;
			gbc2.gridy = 1;
			gbc2.ipadx = 5;
			gbc2.weightx = 0;
			gbc2.anchor = GridBagConstraints.BELOW_BASELINE_TRAILING;

			getContentPane().add(ok, gbc2);

			setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
		}

		private void okButtonActionPerformed(ActionEvent e) {
			Object[] sel = acctList.getSelectedValues();
			if (sel != null) {
				addToBudget(sel);
				for (Object obj : sel) {
					model.removeElement(obj);
					if (model.size() == 0) {
						dispose();
					}
				}
			}
		}
	}
}
