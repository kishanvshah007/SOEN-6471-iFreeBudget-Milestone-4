/*******************************************************************************
 * Copyright  
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package net.mjrz.fm.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.util.Properties;

import net.mjrz.fm.Main;

import org.apache.log4j.Logger;

public class Profiles {

	private Properties profilesMap;

	private static Profiles profiles = null;

	private static Logger logger = Logger.getLogger(Profiles.class.getName());

	private static final String PROFILES_FILE_NAME = ".profiles.properties";

	private String profilesFile = null;

	private Profiles() throws Exception {
		StringBuilder homedir = new StringBuilder(Main.homedir);
		homedir.append(Main.PATH_SEPARATOR);
		homedir.append("fmdata");
		homedir.append(Main.PATH_SEPARATOR);
		homedir.append("profiles");
		homedir.append(Main.PATH_SEPARATOR);
		homedir.append(PROFILES_FILE_NAME);

		profilesFile = homedir.toString();

		profilesMap = new Properties();
		/* Load legacy profiles first */
		loadLegacyProfiles();

		/* Next load the profiles from the property file */
		File pfile = new File(profilesFile);
		if (!pfile.exists()) {
			pfile.createNewFile();
		}
		FileInputStream in = null;
		try {
			in = new FileInputStream(profilesFile);
			profilesMap.load(in);
			saveProfilesFile();
		}
		catch (Exception e) {
			throw e;
		}
		finally {
			if (in != null) {
				in.close();
			}
		}
	}

	private void loadLegacyProfiles() {
		StringBuilder homedir = new StringBuilder(
				System.getProperty("user.home"));
		homedir.append(Main.PATH_SEPARATOR);
		homedir.append("fmdata");
		homedir.append(Main.PATH_SEPARATOR);
		homedir.append("profiles");
		File dir = new File(homedir.toString());
		if (!dir.exists())
			return;

		File[] flist = dir.listFiles();
		for (File f : flist) {
			if (!f.isDirectory())
				continue;
			String name = f.getName();
			profilesMap.put(name, f.getAbsolutePath());
		}
	}

	public void deleteProfile(String profileName) {
		logger.info("Deleting profile " + profileName);
		FileWriter propsout = null;
		try {
			profilesMap.remove(profileName);
			propsout = new FileWriter(profilesFile);
			profilesMap.store(propsout,
					"---System generated. Do not edit this file!!!!---");
			propsout.close();
		}
		catch (Exception e) {
			logger.error(MiscUtils.stackTrace2String(e));
		}
		finally {
			try {
				propsout.close();
			}
			catch (Exception e) {
				logger.error(e);
			}
		}
	}

	public void addProfile(String profileName, String path) {
		try {
			profilesMap.setProperty(profileName, path);
			saveProfilesFile();
		}
		catch (Exception e) {
			logger.error(MiscUtils.stackTrace2String(e));
		}
	}

	private void saveProfilesFile() {
		FileWriter propsout = null;
		try {
			propsout = new FileWriter(profilesFile);
			profilesMap.store(propsout,
					"---System generated. Do not edit this file!!!!---");
			propsout.close();
		}
		catch (Exception e) {
			logger.error(MiscUtils.stackTrace2String(e));
		}
		finally {
			try {
				propsout.close();
			}
			catch (Exception e) {
				logger.error(e);
			}
		}
	}

	public String getPathForProfile(String profileName) {
		return (String) profilesMap.get(profileName);
	}

	public String[] getProfileNames() {
		java.util.Set<String> keys = profilesMap.stringPropertyNames();

		String[] type = new String[keys.size()];
		return keys.toArray(type);
	}

	public int getProfilesCount() {
		return profilesMap.size();
	}

	public boolean profileExists(String profileName) {
		return profilesMap.containsKey(profileName);
	}

	public synchronized static Profiles getInstance() {
		if (profiles == null) {
			try {
				profiles = new Profiles();
			}
			catch (Exception e) {
				logger.error(MiscUtils.stackTrace2String(e));
				return null;
			}
		}
		return profiles;
	}
}
